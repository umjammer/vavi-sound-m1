/*
 * https://www.codeproject.com/Tips/646359/M-NET
 */

package m1.emu;

import java.awt.image.BufferedImage;

import m1.mame.taito.Taito;


public class Crosshair {

    public static class crosshair_global {

        public boolean[] used;
        public boolean[] visible;
        public BufferedImage[] bitmap;
//        bitmap_t bitmap[MAX_PLAYERS];
//        render_texture texture[MAX_PLAYERS];
//        const device_config screen[MAX_PLAYERS];
        public int[] x;
        public int[] y;
        public byte fade;
        public byte animation_counter;
    }

    public static final crosshair_global global = new crosshair_global();
    public static final byte[] crosshair_raw_top = new byte[] {
            0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
            0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) (byte) 0xe0, 0x00,
            0x00, (byte) (byte) 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0xf0, 0x00,
            0x01, (byte) 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0xf8, 0x00,
            0x03, (byte) 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, (byte) 0xfc, 0x00,
            0x07, (byte) 0xfe, 0x00, 0x00, 0x00, 0x0f, (byte) 0xfe, 0x00, 0x00, 0x00, 0x07, (byte) 0xfe, 0x00,
            0x0f, (byte) 0xff, 0x00, 0x00, 0x01, (byte) 0xff, (byte) 0xff, (byte) 0xf0, 0x00, 0x00, 0x0f, (byte) 0xff, 0x00,
            0x1f, (byte) 0xff, (byte) 0x80, 0x00, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x1f, (byte) 0xff, (byte) 0x80,
            0x3f, (byte) 0xff, (byte) 0x80, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00, 0x1f, (byte) 0xff, (byte) 0xc0,
            0x7f, (byte) 0xff, (byte) 0xc0, 0x03, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xf8, 0x00, 0x3f, (byte) 0xff, (byte) 0xe0,
            (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x07, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfc, 0x00, 0x7f, (byte) 0xff, (byte) 0xf0,
            0x7f, (byte) 0xff, (byte) 0xf0, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xe0,
            0x3f, (byte) 0xff, (byte) 0xf8, 0x7f, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xc1, (byte) 0xff, (byte) 0xff, (byte) 0xc0,
            0x0f, (byte) 0xff, (byte) 0xf8, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe1, (byte) 0xff, (byte) 0xff, 0x00,
            0x07, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfb, (byte) 0xff, (byte) 0xfe, 0x00,
            0x03, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xfc, 0x00,
            0x01, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xf0, 0x01, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xf8, 0x00,
            0x00, 0x7f, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00,
            0x00, 0x3f, (byte) 0xff, (byte) 0xff, (byte) 0xf8, 0x00, 0x00, 0x03, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xc0, 0x00,
            0x00, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0xe0, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0x80, 0x00,
            0x00, 0x0f, (byte) 0xff, (byte) 0xff, (byte) 0x80, 0x00, 0x00, 0x00, 0x3f, (byte) 0xff, (byte) 0xff, 0x00, 0x00,
            0x00, 0x03, (byte) 0xff, (byte) 0xfe, 0x00, 0x00, 0x00, 0x00, 0x0f, (byte) 0xff, (byte) 0xfc, 0x00, 0x00,
            0x00, 0x01, (byte) 0xff, (byte) 0xfc, 0x00, 0x00, 0x00, 0x00, 0x07, (byte) 0xff, (byte) 0xf8, 0x00, 0x00,
            0x00, 0x03, (byte) 0xff, (byte) 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, (byte) 0xff, (byte) 0xf8, 0x00, 0x00,
            0x00, 0x07, (byte) 0xff, (byte) 0xfc, 0x00, 0x00, 0x00, 0x00, 0x03, (byte) 0xff, (byte) 0xfc, 0x00, 0x00,
            0x00, 0x0f, (byte) 0xff, (byte) 0xfe, 0x00, 0x00, 0x00, 0x00, 0x07, (byte) 0xff, (byte) 0xfe, 0x00, 0x00,
            0x00, 0x0f, (byte) 0xff, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x0f, (byte) 0xff, (byte) 0xfe, 0x00, 0x00,
            0x00, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0x80, 0x00, 0x00, 0x00, 0x1f, (byte) 0xff, (byte) 0xff, 0x00, 0x00,
            0x00, 0x1f, (byte) 0xff, (byte) 0xff, (byte) 0x80, 0x00, 0x00, 0x00, 0x1f, (byte) 0xff, (byte) 0xff, 0x00, 0x00,
            0x00, 0x3f, (byte) 0xfe, (byte) 0xff, (byte) 0xc0, 0x00, 0x00, 0x00, 0x3f, (byte) 0xff, (byte) 0xff, (byte) 0x80, 0x00,
            0x00, 0x7f, (byte) 0xfc, 0x7f, (byte) 0xe0, 0x00, 0x00, 0x00, 0x7f, (byte) 0xe7, (byte) 0xff, (byte) 0xc0, 0x00,
            0x00, 0x7f, (byte) 0xf8, 0x3f, (byte) 0xf0, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xc3, (byte) 0xff, (byte) 0xc0, 0x00,
            0x00, (byte) 0xff, (byte) 0xf8, 0x1f, (byte) 0xf8, 0x00, 0x00, 0x01, (byte) 0xff, (byte) 0x83, (byte) 0xff, (byte) 0xe0, 0x00,
            0x00, (byte) 0xff, (byte) 0xf0, 0x07, (byte) 0xf8, 0x00, 0x00, 0x01, (byte) 0xfe, 0x01, (byte) 0xff, (byte) 0xe0, 0x00,
            0x00, (byte) 0xff, (byte) 0xf0, 0x03, (byte) 0xfc, 0x00, 0x00, 0x03, (byte) 0xfc, 0x01, (byte) 0xff, (byte) 0xe0, 0x00,
            0x01, (byte) 0xff, (byte) 0xe0, 0x01, (byte) 0xfe, 0x00, 0x00, 0x07, (byte) 0xf8, 0x00, (byte) 0xff, (byte) 0xf0, 0x00,
            0x01, (byte) 0xff, (byte) 0xe0, 0x00, (byte) 0xff, 0x00, 0x00, 0x0f, (byte) 0xf0, 0x00, (byte) 0xff, (byte) 0xf0, 0x00,
            0x01, (byte) 0xff, (byte) 0xc0, 0x00, 0x3f, (byte) 0x80, 0x00, 0x1f, (byte) 0xc0, 0x00, 0x7f, (byte) 0xf0, 0x00,
            0x01, (byte) 0xff, (byte) 0xc0, 0x00, 0x1f, (byte) 0x80, 0x00, 0x1f, (byte) 0x80, 0x00, 0x7f, (byte) 0xf0, 0x00,
            0x03, (byte) 0xff, (byte) 0xc0, 0x00, 0x0f, (byte) 0xc0, 0x00, 0x3f, 0x00, 0x00, 0x7f, (byte) 0xf8, 0x00,
            0x03, (byte) 0xff, (byte) 0x80, 0x00, 0x07, (byte) 0xe0, 0x00, 0x7e, 0x00, 0x00, 0x3f, (byte) 0xf8, 0x00,
            0x03, (byte) 0xff, (byte) 0x80, 0x00, 0x01, (byte) 0xf0, 0x00, (byte) 0xf8, 0x00, 0x00, 0x3f, (byte) 0xf8, 0x00,
            0x03, (byte) 0xff, (byte) 0x80, 0x00, 0x00, (byte) 0xf8, 0x01, (byte) 0xf0, 0x00, 0x00, 0x3f, (byte) 0xf8, 0x00,
            0x03, (byte) 0xff, (byte) 0x80, 0x00, 0x00, 0x78, 0x01, (byte) 0xe0, 0x00, 0x00, 0x3f, (byte) 0xf8, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x3c, 0x03, (byte) 0xc0, 0x00, 0x00, 0x3f, (byte) 0xfc, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x0e, 0x07, 0x00, 0x00, 0x00, 0x1f, (byte) 0xfc, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x07, 0x0e, 0x00, 0x00, 0x00, 0x1f, (byte) 0xfc, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x03, (byte) 0x9c, 0x00, 0x00, 0x00, 0x1f, (byte) 0xfc, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x01, (byte) 0x98, 0x00, 0x00, 0x00, 0x1f, (byte) 0xfc, 0x00,
            0x07, (byte) 0xff, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x1f, (byte) 0xfc, 0x00
    };
    public static final int[] crosshair_colors = new int[] {
            0x40_40ff,
            0xff_4040,
            0x40_ff40,
            0xff_ff40,
            0xff_40ff,
            0x40_ffff,
            0xff_ffff
    };

    public static void crosshair_init() {
        global.used = new boolean[8];
        global.visible = new boolean[8];
        global.bitmap = new BufferedImage[8];
        global.x = new int[8];
        global.y = new int[8];
        switch (Machine.sName) {
            case "opwolf":
            case "opwolfa":
            case "opwolfj":
            case "opwolfu":
            case "opwolfb":
            case "opwolfp":
                global.used[0] = true;
                global.visible[0] = true;
                create_bitmap(0);
                Video.drawcrosshair = Video::drawcrosshair_opwolf;
                break;
            default:
                Video.drawcrosshair = Video::drawcrosshair_null;
                break;
        }
    }

    public static void create_bitmap(int player) {
        global.bitmap[player] = new BufferedImage(100, 100, BufferedImage.TYPE_INT_ARGB);
        int x, y;
        int color = crosshair_colors[player];
        for (y = 0; y < 100; y++) {
            for (x = 0; x < 100; x++) {
                global.bitmap[player].setRGB(x, y, 0xff_ffff);
            }
        }
        for (y = 0; y < 50; y++) {
            for (x = 0; x < 100; x++) {
                if (((crosshair_raw_top[y * (107 / 8) + x / 8] << (x % 8)) & 0x80) != 0) {
                    global.bitmap[player].setRGB(x, y, 0xff00_0000 | color);
                    global.bitmap[player].setRGB(x, 99 - y, 0xff00_0000 | color);
                }
            }
        }
    }

    public static void animate_opwolf() {
        int player;
        global.animation_counter += 0x04;
        if ((global.animation_counter & 0xff)  < 0x80) {
            global.fade = (byte) (0xa0 + (0x60 * (global.animation_counter & 0x7f) / 0x80));
        } else {
            global.fade = (byte) (0xa0 + (0x60 * (~global.animation_counter & 0x7f) / 0x80));
        }
        for (player = 0; player < 8; player++) {
            if (global.used[player]) {
                global.x[player] = ((Taito.p1x * 320) / 256) - 0;
                global.y[player] = Taito.p1y - 10;
            }
        }
    }
}
